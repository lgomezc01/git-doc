####### git log #######
The git log command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes. While git status lets you inspect the working directory and the staging area, git log only operates on the committed history.

Git Tutorial: git status vs. git log
Log output can be customized in several ways, from simply filtering commits to displaying them in a completely user-defined format. Some of the most common configurations of git log are presented below.

Usage
git log
Display the entire commit history using the default formatting. If the output takes up more than one screen, you can use Space to scroll and q to exit.

git log -n <limit>
Limit the number of commits by . For example, git log -n 3 will display only 3 commits.

Condense each commit to a single line. This is useful for getting a high-level overview of the project history.

git log --oneline
git log --stat

Along with the ordinary git log information, include which files were altered and the relative number of lines that were added or deleted from each of them.

git log -p
Display the patch representing each commit. This shows the full diff of each commit, which is the most detailed view you can have of your project history.

git log --author="<pattern>"
Search for commits by a particular author. The  argument can be a plain string or a regular expression.

git log --grep="<pattern>"
Search for commits with a commit message that matches , which can be a plain string or a regular expression.

git log <since>..<until>
Show only commits that occur between < since > and < until >. Both arguments can be either a commit ID, a branch name, HEAD, or any other kind of revision reference.

git log <file>
Only display commits that include the specified file. This is an easy way to see the history of a particular file.

git log --graph --decorate --oneline
A few useful options to consider. The --graph flag that will draw a text based graph of the commits on the left hand side of the commit messages. --decorate adds the names of branches or tags of the commits that are shown. --oneline shows the commit information on a single line making it easier to browse through commits at-a-glance.

Discussion
The git log command is Git's basic tool for exploring a repository’s history. It’s what you use when you need to find a specific version of a project or figure out what changes will be introduced by merging in a feature branch.

commit 3157ee3718e180a9476bf2e5cab8e3f1e78a73b7
Author: John Smith

Most of this is pretty straightforward; however, the first line warrants some explanation. The 40-character string after commit is an SHA-1 checksum of the commit’s contents. This serves two purposes. First, it ensures the integrity of the commit—if it was ever corrupted, the commit would generate a different checksum. Second, it serves as a unique ID for the commit.

This ID can be used in commands like git log .. to refer to specific commits. For instance, git log 3157e..5ab91 will display everything between the commits with ID's 3157e and 5ab91. Aside from checksums, branch names (discussed in the Branch Module) and the HEAD keyword are other common methods for referring to individual commits. HEAD always refers to the current commit, be it a branch or a specific commit.

The ~ character is useful for making relative references to the parent of a commit. For example, 3157e~1 refers to the commit before 3157e, and HEAD~3 is the great-grandparent of the current commit.

The idea behind all of these identification methods is to let you perform actions based on specific commits. The git log command is typically the starting point for these interactions, as it lets you find the commits you want to work with.

Example
The Usage section provides many examples of git log, but keep in mind that several options can be combined into a single command:

git log --author="John Smith" -p hello.py
This will display a full diff of all the changes John Smith has made to the file hello.py.

The .. syntax is a very useful tool for comparing branches. The next example displays a brief overview of all the commits that are in some-feature that are not in main.

git log --oneline main..some-feature
Ready to learn git status?

Try this interactive 

####### OTHER EXAMPLEs ########
git log --graph --pretty=format:"[%h: %an]: %s (%ai)" --stat
git log --graph --pretty=format:"[%h: %an]: %s (%ai)" --stat -p
git config alias.trace 'log --graph --pretty=format:"[%h: %an]: %s (%ai)" --stat' 

#Para ver el path completo de los archvios que cambian en la rama release/5.39.0.0 y que no están en la rama remota: remotes/origin/release/release
git log --name-only  remotes/origin/release/release..release/5.39.0.0
git log --name-status remotes/origin/release/release..release/5.39.0.0
git log --numstat remotes/origin/release/release..release/5.39.0.0
git log --grep="MKP-2028"